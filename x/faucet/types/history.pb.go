// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/history.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MintHistory struct {
	Minter   string `protobuf:"bytes,1,opt,name=minter,proto3" json:"minter,omitempty"`
	Lasttime int64  `protobuf:"varint,2,opt,name=lasttime,proto3" json:"lasttime,omitempty"`
	Tally    int64  `protobuf:"varint,3,opt,name=tally,proto3" json:"tally,omitempty"`
}

func (m *MintHistory) Reset()         { *m = MintHistory{} }
func (m *MintHistory) String() string { return proto.CompactTextString(m) }
func (*MintHistory) ProtoMessage()    {}
func (*MintHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c7661bd60c522a4, []int{0}
}
func (m *MintHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintHistory.Merge(m, src)
}
func (m *MintHistory) XXX_Size() int {
	return m.Size()
}
func (m *MintHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_MintHistory.DiscardUnknown(m)
}

var xxx_messageInfo_MintHistory proto.InternalMessageInfo

func (m *MintHistory) GetMinter() string {
	if m != nil {
		return m.Minter
	}
	return ""
}

func (m *MintHistory) GetLasttime() int64 {
	if m != nil {
		return m.Lasttime
	}
	return 0
}

func (m *MintHistory) GetTally() int64 {
	if m != nil {
		return m.Tally
	}
	return 0
}

func init() {
	proto.RegisterType((*MintHistory)(nil), "faucet.v1.MintHistory")
}

func init() { proto.RegisterFile("v1/history.proto", fileDescriptor_0c7661bd60c522a4) }

var fileDescriptor_0c7661bd60c522a4 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8f, 0xcf, 0x4a, 0xc4, 0x30,
	0x10, 0x87, 0x1b, 0x17, 0x17, 0xb7, 0x5e, 0xa4, 0x2c, 0xd2, 0xed, 0x21, 0x2c, 0x9e, 0xf6, 0xd4,
	0xb0, 0x88, 0x2f, 0xe0, 0xc9, 0x8b, 0x08, 0x7b, 0x11, 0xbc, 0x48, 0x1a, 0xd3, 0x34, 0x90, 0x64,
	0x96, 0x64, 0xb2, 0xd0, 0xb7, 0xf0, 0xb1, 0x3c, 0xee, 0xd1, 0xa3, 0xb4, 0x2f, 0x22, 0x36, 0xc5,
	0xdb, 0x7c, 0xbf, 0x6f, 0x98, 0x3f, 0xf9, 0xcd, 0x69, 0xcf, 0x3a, 0x1d, 0x10, 0x7c, 0x5f, 0x1f,
	0x3d, 0x20, 0x14, 0xab, 0x96, 0x47, 0x21, 0xb1, 0x3e, 0xed, 0xab, 0x8d, 0x80, 0x60, 0x21, 0xbc,
	0x4f, 0x82, 0x25, 0x48, 0x5d, 0xd5, 0x5a, 0x81, 0x82, 0x94, 0xff, 0x55, 0x73, 0xba, 0x51, 0x00,
	0xca, 0x48, 0x36, 0x51, 0x13, 0x5b, 0xc6, 0xdd, 0x3c, 0xf6, 0xee, 0x35, 0xbf, 0x7e, 0xd6, 0x0e,
	0x9f, 0xd2, 0xae, 0xe2, 0x36, 0x5f, 0x5a, 0xed, 0x50, 0xfa, 0x92, 0x6c, 0xc9, 0x6e, 0x75, 0x98,
	0xa9, 0xa8, 0xf2, 0x2b, 0xc3, 0x03, 0xa2, 0xb6, 0xb2, 0xbc, 0xd8, 0x92, 0xdd, 0xe2, 0xf0, 0xcf,
	0xc5, 0x3a, 0xbf, 0x44, 0x6e, 0x4c, 0x5f, 0x2e, 0x26, 0x91, 0xe0, 0xf1, 0xe5, 0x6b, 0xa0, 0xe4,
	0x3c, 0x50, 0xf2, 0x33, 0x50, 0xf2, 0x39, 0xd2, 0xec, 0x3c, 0xd2, 0xec, 0x7b, 0xa4, 0xd9, 0xdb,
	0x83, 0xd2, 0xd8, 0xc5, 0xa6, 0x16, 0x60, 0x99, 0xe8, 0xb8, 0x37, 0x52, 0xba, 0x56, 0x6a, 0x66,
	0xe1, 0x23, 0x1a, 0x19, 0x98, 0x76, 0x22, 0x36, 0x1c, 0xc1, 0xb3, 0xf4, 0x32, 0xc3, 0xfe, 0x28,
	0x43, 0xb3, 0x9c, 0x0e, 0xbe, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x49, 0xec, 0x61, 0x1b,
	0x01, 0x00, 0x00,
}

func (m *MintHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tally != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Tally))
		i--
		dAtA[i] = 0x18
	}
	if m.Lasttime != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Lasttime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Minter) > 0 {
		i -= len(m.Minter)
		copy(dAtA[i:], m.Minter)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Minter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHistory(dAtA []byte, offset int, v uint64) int {
	offset -= sovHistory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MintHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Minter)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Lasttime != 0 {
		n += 1 + sovHistory(uint64(m.Lasttime))
	}
	if m.Tally != 0 {
		n += 1 + sovHistory(uint64(m.Tally))
	}
	return n
}

func sovHistory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHistory(x uint64) (n int) {
	return sovHistory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MintHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lasttime", wireType)
			}
			m.Lasttime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lasttime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tally", wireType)
			}
			m.Tally = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tally |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHistory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHistory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHistory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHistory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHistory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHistory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHistory = fmt.Errorf("proto: unexpected end of group")
)
